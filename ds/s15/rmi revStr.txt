Program:
Interface:
import java.rmi.Remote;
import java.rmi.RemoteException;
public interface ReverseInterface extends
Remote{ String reverseStr(String s) throws
RemoteException;
}
Implementation:
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
public class ReverseImpl extends UnicastRemoteObject implements
ReverseInterface{
public ReverseImpl() throws RemoteException{
}p
ublic String reverseStr(String s1)
{
System.out.println("REMOTE SERVICE: Remote Client Request Message
is : "+s1);
StringBuilder sb=new StringBuilder(s1);
String response=sb.reverse().toString();
return response;
}
}
Server:
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.Naming;
import java.net.MalformedURLException;
import java.rmi.registry.LocateRegistry;
public class ReverseServer{
public ReverseServer() throws RemoteException{
}p
ublic static void main(String args[]) throws RemoteException
{
ReverseImpl reverseObj=new ReverseImpl();
int port=Integer.parseInt(args[1]);
try{
LocateRegistry.createRegistry(port);
System.out.println("\n RMI registry created \n");
String host=args[0];
String bindLocation="//"+host+":"+port+"/"+args[2];
Naming.bind(bindLocation,reverseObj);
System.out.println("\nRMI server ready at "+bindLocation);
}c
atch(Exception e)
{
e.printStackTrace();
}
}
}
Client:
import java.rmi.*;
import java.io.*;
import java.net.MalformedURLException;
public class ReverseClient {
public static void main(String args[])
{
String
connectLocation="//"+args[0]+":"+Integer.parseInt(args[1])+"/"+args[2];
ReverseInterface revintf=null;
try{
System.out.println("\n Connecting the client at:
"+connectLocation);
revintf=(ReverseInterface)Naming.lookup(connectLocation);
BufferedReader br=new BufferedReader(new
InputStreamReader(System.in));
System.out.println("\nCLI: Enter the request message to send
to remote service:");
String s=br.readLine();
String response=revintf.reverseStr(s);
System.out.println("\n CLI: response from remote method
is:"+response);
}c
atch(Exception e)
{
e.printStackTrace();
}
}
}